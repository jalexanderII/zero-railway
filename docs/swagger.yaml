basePath: /
definitions:
  handlers.CreateTodoDTO:
    properties:
      completed:
        type: boolean
      date:
        type: string
      description:
        type: string
      title:
        type: string
    type: object
  handlers.CreateTodoResDTO:
    properties:
      inserted_id:
        type: string
    type: object
  handlers.DBInsertResponse:
    properties:
      inserted_id:
        type: string
    type: object
  handlers.DeleteTodoResDTO:
    properties:
      deleted_count:
        type: integer
    type: object
  handlers.KPI:
    properties:
      credit:
        type: number
      debit:
        type: number
      payment_plans:
        type: number
    type: object
  handlers.Series:
    properties:
      data:
        items:
          type: number
        type: array
      name:
        type: string
    type: object
  handlers.UpdateTodoDTO:
    properties:
      completed:
        type: boolean
      date:
        type: string
      description:
        type: string
      title:
        type: string
    type: object
  handlers.UpdateTodoResDTO:
    properties:
      updated_count:
        type: integer
    type: object
  models.Account:
    properties:
      annual_percentage_rate:
        items:
          $ref: '#/definitions/models.AnnualPercentageRates'
        type: array
      available_balance:
        type: number
      created_at:
        type: string
      credit_limit:
        type: number
      current_balance:
        type: number
      id:
        type: string
      is_overdue:
        type: boolean
      iso_currency_code:
        type: string
      last_payment_amount:
        type: number
      last_statement_balance:
        type: number
      last_statement_issue_date:
        type: string
      minimum_payment_amount:
        type: number
      name:
        type: string
      next_payment_due_date:
        type: string
      official_name:
        type: string
      plaid_account_id:
        type: string
      subtype:
        type: string
      type:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  models.AnnualPercentageRates:
    properties:
      apr_percentage:
        type: number
      apr_type:
        type: string
      balance_subject_to_apr:
        type: number
      interest_charge_amount:
        type: number
    type: object
  models.PaymentAction:
    properties:
      account_id:
        type: string
      amount:
        type: number
      id:
        type: string
      status:
        $ref: '#/definitions/models.PaymentActionStatus'
      transaction_date:
        type: string
    type: object
  models.PaymentActionStatus:
    enum:
    - 0
    - 1
    - 2
    - 3
    type: integer
    x-enum-varnames:
    - PaymentActionStatus_PAYMENT_ACTION_STATUS_UNKNOWN
    - PaymentActionStatus_PAYMENT_ACTION_STATUS_PENDING
    - PaymentActionStatus_PAYMENT_ACTION_STATUS_COMPLETED
    - PaymentActionStatus_PAYMENT_ACTION_STATUS_IN_DEFAULT
  models.PaymentFrequency:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    type: integer
    x-enum-varnames:
    - PaymentFrequency_PAYMENT_FREQUENCY_UNKNOWN
    - PaymentFrequency_PAYMENT_FREQUENCY_WEEKLY
    - PaymentFrequency_PAYMENT_FREQUENCY_BIWEEKLY
    - PaymentFrequency_PAYMENT_FREQUENCY_MONTHLY
    - PaymentFrequency_PAYMENT_FREQUENCY_QUARTERLY
  models.PaymentPlan:
    properties:
      active:
        type: boolean
      amount:
        type: number
      amount_per_payment:
        type: number
      end_date:
        type: string
      id:
        type: string
      name:
        type: string
      payment_action:
        items:
          $ref: '#/definitions/models.PaymentAction'
        type: array
      payment_freq:
        $ref: '#/definitions/models.PaymentFrequency'
      payment_plan_id:
        type: string
      payment_task_id:
        items:
          type: string
        type: array
      plan_type:
        $ref: '#/definitions/models.PlanType'
      status:
        $ref: '#/definitions/models.PaymentStatus'
      timeline:
        type: number
      user_id:
        type: string
    type: object
  models.PaymentStatus:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    type: integer
    x-enum-varnames:
    - PaymentStatus_PAYMENT_STATUS_UNKNOWN
    - PaymentStatus_PAYMENT_STATUS_CURRENT
    - PaymentStatus_PAYMENT_STATUS_COMPLETED
    - PaymentStatus_PAYMENT_STATUS_CANCELLED
    - PaymentStatus_PAYMENT_STATUS_IN_DEFAULT
  models.PaymentTask:
    properties:
      account_id:
        type: string
      amount:
        type: number
      created_at:
        type: string
      id:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  models.PlanType:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - PlanType_PLAN_TYPE_UNKNOWN
    - PlanType_PLAN_TYPE_OPTIM_CREDIT_SCORE
    - PlanType_PLAN_TYPE_MIN_FEES
  models.SendSMSResponse:
    properties:
      error_message:
        type: string
      successful:
        type: boolean
    type: object
  models.Todo:
    properties:
      completed:
        type: boolean
      date:
        type: string
      description:
        type: string
      id:
        type: string
      title:
        type: string
    type: object
  models.Transaction:
    properties:
      account_id:
        type: string
      amount:
        type: number
      authorized_date:
        type: string
      category:
        items:
          type: string
        type: array
      category_id:
        type: string
      created_at:
        type: string
      date:
        type: string
      detailed_category:
        type: string
      id:
        type: string
      iso_currency_code:
        type: string
      merchant_name:
        type: string
      name:
        type: string
      original_description:
        type: string
      payment_channel:
        type: string
      pending:
        type: boolean
      pending_transaction_id:
        type: string
      plaid_account_id:
        type: string
      plaid_transaction_id:
        type: string
      primary_category:
        type: string
      transaction_details:
        $ref: '#/definitions/models.TransactionDetails'
      transaction_type:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  models.TransactionDetails:
    properties:
      address:
        type: string
      city:
        type: string
      country:
        type: string
      reference_number:
        type: string
      state:
        type: string
      store_number:
        type: string
      zipcode:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      phone_number:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    name: Joel Alexander
  description: This is the backend API for the Zero Fintech app.
  license:
    name: MIT
  title: Zero Fintech Backend API
  version: "0.1"
paths:
  /accounts/:acc_id:
    get:
      consumes:
      - '*/*'
      description: fetch account by account id.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Account'
      summary: Get a single account
      tags:
      - accounts
  /accounts/:email:
    get:
      description: fetch all accounts for the user by email.
      parameters:
      - description: User email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Account'
            type: array
      summary: Get accounts for a single user.
      tags:
      - accounts
  /accounts/:user_id:
    get:
      description: fetch all accounts for the user by user id.
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Account'
            type: array
      summary: Get accounts for a single user.
      tags:
      - accounts
  /health:
    get:
      consumes:
      - '*/*'
      description: get the status of server.
      produces:
      - text/plain
      responses:
        "200":
          description: OK
      summary: Show the status of server.
      tags:
      - health
  /kpi/:email:
    get:
      description: fetch a KPIs for a single user.
      parameters:
      - description: User email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.KPI'
      summary: Get a user KPIs.
      tags:
      - planning
  /notify:
    get:
      consumes:
      - '*/*'
      description: Check all users payment actions and notify for any approaching
        payments.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SendSMSResponse'
            type: array
      summary: Notify all users of upcoming payment actions.
      tags:
      - planning
  /payment_tasks/:email:
    get:
      description: fetch all payment_tasks for the user.
      parameters:
      - description: User email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PaymentTask'
            type: array
      summary: Get payment_tasks for a single user.
      tags:
      - payment_tasks
  /paymentplan/:email:
    post:
      consumes:
      - application/json
      description: Create a payment plans for a specific user.
      parameters:
      - description: User email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PaymentPlan'
            type: array
      summary: Create a Payment Plan for the user.
      tags:
      - paymentplan
  /todos:
    get:
      consumes:
      - '*/*'
      description: fetch every todo available.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Todo'
            type: array
      summary: Get all todos.
      tags:
      - todos
    post:
      consumes:
      - application/json
      description: create a single todo.
      parameters:
      - description: Todo to create
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateTodoDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.CreateTodoResDTO'
      summary: Create a todo.
      tags:
      - todos
  /todos/:id:
    delete:
      description: delete a single todo by id.
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.DeleteTodoResDTO'
      summary: Delete a single todo.
      tags:
      - todos
    get:
      description: fetch a single todo.
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Todo'
      summary: Get a single todo.
      tags:
      - todos
    put:
      consumes:
      - application/json
      description: update a single todo.
      parameters:
      - description: Todo update data
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateTodoDTO'
      - description: Todo ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UpdateTodoResDTO'
      summary: Update a todo.
      tags:
      - todos
  /transactions/:email:
    get:
      description: fetch all transactions for the user.
      parameters:
      - description: User email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Transaction'
            type: array
      summary: Get transactions for a single user.
      tags:
      - transactions
  /user/:id:
    get:
      description: fetch a single user by user id.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Get a single user.
      tags:
      - users
  /users:
    post:
      consumes:
      - application/json
      description: create a single user.
      parameters:
      - description: User to create
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.DBInsertResponse'
      summary: Create a user.
      tags:
      - user
  /users/:email:
    get:
      description: fetch a single user.
      parameters:
      - description: User email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Get a single user.
      tags:
      - users
  /waterfall/:email:
    get:
      description: Create a waterfall from users payment plans.
      parameters:
      - description: User email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Series'
      summary: Get user waterfall data.
      tags:
      - planning
swagger: "2.0"
